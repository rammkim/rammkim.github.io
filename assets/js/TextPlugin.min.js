/*!
 * VERSION: 0.5.2
 * DATE: 2016-06-22
 * UPDATES AND DOCS AT: http://greensock.com
 *
 * @license Copyright (c) 2008-2016, GreenSock. All rights reserved.
 * This work is subject to the terms at http://greensock.com/standard-license or for
 * Club GreenSock members, the software agreement that was issued with your membership.
 *
 * @author: Jack Doyle, jack@greensock.com
 */
var _gsScope = 'undefined' !== typeof module && module.exports && 'undefined' !== typeof global ? global : this || window;
(_gsScope._gsQueue || (_gsScope._gsQueue = [])).push(function () {
    var f = function (a) {
            var b = a.nodeType,
                d = '';
            if (1 === b || 9 === b || 11 === b) {
                if ('string' === typeof a.textContent) return a.textContent;
                for (a = a.firstChild; a; a = a.nextSibling) d += f(a);
            } else if (3 === b || 4 === b) return a.nodeValue;
            return d;
        },
        e = _gsScope._gsDefine.plugin({
            propName: 'text',
            API: 2,
            version: '0.5.2',
            init: function (a, b, d) {
                var c = a.nodeName.toUpperCase();
                this._svg = a.getBBox && ('TEXT' === c || 'TSPAN' === c);
                if (!('innerHTML' in a || this._svg)) return !1;
                this._target = a;
                'object' !== typeof b && (b = { value: b });
                if (void 0 === b.value) return (this._text = this._original = ['']), !0;
                this._delimiter = b.delimiter || '';
                this._original = f(a).replace(/\s+/g, ' ').split(this._delimiter);
                this._text = b.value.replace(/\s+/g, ' ').split(this._delimiter);
                if ((this._runBackwards = !0 === d.vars.runBackwards)) (c = this._original), (this._original = this._text), (this._text = c);
                'string' === typeof b.newClass && ((this._newClass = b.newClass), (this._hasClass = !0));
                'string' === typeof b.oldClass && ((this._oldClass = b.oldClass), (this._hasClass = !0));
                c = this._original.length - this._text.length;
                a = 0 > c ? this._original : this._text;
                this._fillChar = b.fillChar || (b.padSpace ? '&nbsp;' : '');
                for (0 > c && (c = -c); -1 < --c; ) a.push(this._fillChar);
                return !0;
            },
            set: function (a) {
                1 < a ? (a = 1) : 0 > a && (a = 0);
                this._runBackwards && (a = 1 - a);
                var b = this._text.length;
                a = (a * b + 0.5) | 0;
                var d;
                this._hasClass
                    ? ((d = this._newClass && 0 !== a),
                      (b = this._oldClass && a !== b),
                      (b = (d ? "<span class='" + this._newClass + "'>" : '') + this._text.slice(0, a).join(this._delimiter) + (d ? '</span>' : '') + (b ? "<span class='" + this._oldClass + "'>" : '') + this._delimiter + this._original.slice(a).join(this._delimiter) + (b ? '</span>' : '')))
                    : (b = this._text.slice(0, a).join(this._delimiter) + this._delimiter + this._original.slice(a).join(this._delimiter));
                this._svg ? (this._target.textContent = b) : (this._target.innerHTML = '&nbsp;' === this._fillChar && -1 !== b.indexOf('  ') ? b.split('  ').join('&nbsp;&nbsp;') : b);
            }
        }).prototype;
    e._newClass = e._oldClass = e._delimiter = '';
});
_gsScope._gsDefine && _gsScope._gsQueue.pop()();
